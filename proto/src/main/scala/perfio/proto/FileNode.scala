package perfio.proto

import perfio.protoapi.DescriptorProtos.FileDescriptorProto
import perfio.TextOutput
import perfio.scalaapi.*

import java.io.PrintStream


class FileNode(val desc: FileDescriptorProto, val root: RootNode) extends ParentNode:
  def file: FileNode = this
  val name: String = desc.getName
  val protoPackage: String = desc.getPackage
  val fqName: String = s".$protoPackage"
  val javaMultipleFiles: Boolean = desc.getOptions.getJavaMultipleFiles

  val outerClassName: String =
    if(desc.getOptions.hasJavaOuterClassname) desc.getOptions.getJavaOuterClassname
    else
      val n = name.split('/').last
      Util.mkUpperJavaName(if(n.endsWith(".proto")) n.dropRight(6) else n)

  val javaPackageName: String =
    root.packageOverride.getOrElse:
      if(desc.getOptions.hasJavaPackage) desc.getOptions.getJavaPackage else protoPackage

  val javaOutputFileName =
    val s = s"${outerClassName}.java"
    if(javaPackageName.isEmpty) s else javaPackageName.replace('.', '/') + "/" + s

  val fqJavaOuterClassName: String = if(javaPackageName.isEmpty) outerClassName else s"${javaPackageName}.$outerClassName"

  val fqJavaName: String = if(javaMultipleFiles) javaPackageName else fqJavaOuterClassName

  val syntax: Syntax = desc.getSyntax match
    case "proto2" => Syntax.Proto2
    case "proto3" => Syntax.Proto3
    case _ => Syntax.Unknown

  desc.getEnumTypeList.forEach(e => enums += new EnumNode(e, this))
  desc.getMessageTypeList.forEach(m => messages += new MessageNode(m, this))

  override def toString: String = s"file $protoPackage/$name (Java: $fqJavaOuterClassName) $syntax"

  override def dump(out: PrintStream, prefix: String): Unit =
    out.println(s"${prefix}$this")
    super.dump(out, prefix)

  def emit(using toc: TextOutputContext): Printed =
    pm"""// Generated by perfio-proto. Do not edit!
        |// source: ${name}
        |"""
    if(javaPackageName.nonEmpty)
      pm"""package $javaPackageName;
          |"""
    pm"""public final class $outerClassName {
        |  private $outerClassName() {}"""
    for e <- enums do
      toc.to.println
      e.emit(toc.to, toc.prefix + "  ")
    toc.indented:
      for m <- messages do
        toc.to.println
        m.emit
    pm"""}"""


enum Syntax:
  case Proto2, Proto3, Unknown
